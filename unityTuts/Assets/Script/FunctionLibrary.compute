#pragma kernel WaveKernel
#pragma kernel MultiWaveKernel
#pragma kernel RippleKernel
#pragma kernel TestsKernel
#pragma kernel SphereKernel
#pragma kernel StarKernel
#pragma kernel MetsanPeittoKernel

#define PI 3.14159265358979323846
//main kernel of the function
#define KERNEL_FUNCTION(func) \
[numthreads(8,8,1)] \
void func##Kernel(uint3 id:SV_DispatchThreadID) \
{\
    float2 uv = GetUv(id);\
    SetPosition(id, func(uv.x, uv.y, _Time));\
}


//given upon dispatch
RWStructuredBuffer<float3> _Positions;
float _Step, _Time;
uint _Resolution;




float2 GetUv(uint3 id)
{
    //simular to the logic in graph.cs, align calculated points to cube centers
    return (id.xy + 0.5) * _Step - 1.0;
}


void SetPosition(uint3 id, float3 position){
    //check to make sure we only store valid indecies
    //as someone not used to doing work on the gpu, just doing the math on invalid ID's and then just not doing anything with it feels wrong
    //i know that on the gpu it should be Fine tm but regardless this feels wasteful lol
    if (id.x < _Resolution && id.y < _Resolution)
    {
        _Positions[id.x + id.y * _Resolution] = position;
    }
}
//****************************************
//COPIED FROM & DOCUMENTED IN FunctionLibrarly.cs
float3 Wave(float u, float v, float t)
{
    float3 p;
    p.x = u;  p.z = v;
    p.y = sin(PI * (u + v + t))/2.0; //scaled for visuals
    
    return p;
}

float3 MultiWave(float u, float v, float t)
{
    float3 p;
    p.x = u;
    p.z = v;
    t = t / 2.;
    float y = sin(PI * (u + t));
    y += cos(2. * PI * (v + PI * t)) * 0.5;
    p.y = 0.5 * y;
    return p;
}
    //returns a result based on sin of distance to center
float3 Ripple(float u, float v, float t)
{
    float3 p;
    p.x = u;
    p.z = v;

    float d = sqrt(u * u + v * v);
    float y = sin(PI * (4. * d - t));
    p.y = y / (1. + 10. * d);
    return p;

}
    float3 Sphere(float u, float v, float t)
{
    float3 p = 0.;

    float r = cos(0.5 * PI * v);
    p.x = r * sin(PI * u);
    p.y = sin(PI * 0.5 * v);
    p.z = r * cos(PI * u);

    return p;
}


    float3 Star(float u, float v, float t)
{
    float3 p = 0.;
    float r1 = 0.7f + 0.1f * sin(PI * (6 * u + 0.5 * t));
    float r2 = 0.15 + 0.05 * sin(PI * (8. * u + 4. * v + 2. * t));
    float s = r1 + r2 * cos(PI * v) + sin(t);
    p.x = s * sin(PI * u);
    p.y = r2 * sin(PI * v);
    p.z = s * cos(PI * u);


    return p;
}
float3 Tests(float u, float v, float t)
{
    float3 p = float3((u - v)*.5, 0., v*.5);
    p.y = sin(t % (u + 1) - v);
    
    p = Star(p.x *t, t + p.z, p.y-t);
    p.y *= 2;
    return p;
}

float2 CircleMeMf(float r, float t)
{
    float2 spot = 0;
    spot.x = cos(PI * r);
    spot.y = sin(PI * r);

    //************* MATRIX WIZARDRY ******************
    // i dont quite get how this works, like i know that multiplying a vector by a matrix
    // with cosines and sines of a given angle like below gets a rotation, but i have absolutely
    // no idea WHY thats a thing
    //i looked up rotating vector with matrix and with wikipedia by my side i managed to create this
    //apparently matricies are a part of the discrete maths course im starting next week so i hope that explains things
    //i've got a bad feeling that most of what im doing in this function could just be a single matrix tbh
    
    float c = cos(t);
    float s = sin(t);
    spot = mul(spot, float2x2(c, -s, s, c));

    
    
    return spot;
}

float3 MetsanPeitto(float u, float v, float t)
{
    float3 p =0;
    t *= .1;
    p.x = (v * v - t ) % 1;
    p.y = .7*tan(1+p.x);
    t *= .000001;
    //p.x -=p.y;
    p.xz = CircleMeMf(p.x, frac(u)*2*PI) * p.y*10;
    
    p.y = tan(p.y*2-1);
    
    
    
    //p.y = 1-(p.x * p.x * p.x);
    
    
    //t = (t % 10)+10;
    //t *= .1;
    
    //float3 p;
    //float r = (cos(v + t)+1) % 1;
    //p.x = r * sin(PI * u);
    //p.z = r * cos(PI * u);
    //p.y = length(-p.xz);
    ////p.xz = p.xz * 10;
    ////p.y = sin(u*r);
    return p;
}



//end of functions with c# equivalents ready
//*******************************************************************
KERNEL_FUNCTION(Wave)
KERNEL_FUNCTION(MultiWave)
KERNEL_FUNCTION(Ripple)
KERNEL_FUNCTION(Tests)
KERNEL_FUNCTION(Sphere)
KERNEL_FUNCTION(Star)
KERNEL_FUNCTION(MetsanPeitto)


